#include <iostream>
#include <queue>
using namespace std;
class Node
{
    public:
  int val;
  Node *left;
  Node *right;
  Node(int value)
  {
      val=value;
      left=NULL;
      right=NULL;
  }
};
class ACBT
{
  Node *root;
  public:
  ACBT()
  {
      root=NULL;
  }
  void insert(int value)
  {
    //   new node created
      Node *node=new Node(value);
    //   if root is null create new node as a root
      if(!root)
      {
          root=node;
          return;
      }
    //   queue for level order traversal
    queue <Node *> q;
    q.push(root);
    while(!q.empty())
    {
        Node *current=q.front();
        q.pop();
        if(!current->left)
        {
            current->left=node;
            break;
        }
        else
        {
            q.push(current->left);
        }
        if(!current->right)
        {
            current->right=node;
            break;
        }
        else
        {
            q.push(current->right);
        }
    }
  }
  void levelOrder()
  {
      if(!root)
      {
          cout<<"empty"<<endl;
          return;
      }
      queue <Node *> q;
      q.push(root);
      while(!q.empty())
      {
          Node *current=q.front();
          q.pop();
          cout<<current->val<<" ";
          if(current->left)
          {
              q.push(current->left);
          }
          if(current->right)
          {
              q.push(current->right);
          }
      }
      cout<<endl;
  }
};
int main()
{
    ACBT tree;
    tree.insert(1);
    tree.insert(2);
    tree.insert(3);
    tree.insert(4);
    tree.insert(5);
    tree.insert(6);
    tree.insert(7);

    cout << "Level Order Traversal: ";
    tree.levelOrder();
    return 0;
}
