#include <bits/stdc++.h>
using namespace std;
int precedence(char c)
{
    if (c == '^')
        return 3;
    else if (c == '/' || c == '*')
        return 2;
    else if (c == '+' || c == '-')
        return 1;
    else
        return -1;
}
char associativity(char c)
{
    if (c == '^')
        return 'R';
    else
        return 'L';
}
string infixToPostfix(string exp)
{
    stack<char> st;
    string result;

    for (int i = 0; i < exp.length(); i++)
    {
        
        if ((exp[i] >= 'a' && exp[i] <= 'z') || (exp[i] >= 'A' && exp[i] <= 'Z'))
        {
            result += exp[i];
        }
        
        else if (exp[i] == '(')
        {
            st.push(exp[i]);
        }
        
        else if (exp[i] == ')')
        {
            while (!st.empty() && st.top() != '(')
            {
                result += st.top();
                st.pop();
            }
            if (!st.empty())
                st.pop();
        }
        else
        {
            while (!st.empty() && precedence(st.top()) > precedence(exp[i]))
            {
                result += st.top();
                st.pop();
            }
            while (!st.empty() && precedence(st.top()) == precedence(exp[i]) && associativity(exp[i]) == 'L')
            {
                result += st.top();
                st.pop();
            }
            st.push(exp[i]);
        }
    }
    while (!st.empty())
    {
        result += st.top();
        st.pop();
    }

    return result;
}

int main()
{
    string a;
    cout << "Enter expression: ";
    getline(cin,a);
    cout << infixToPostfix(a) << endl;
    return 0;
}
